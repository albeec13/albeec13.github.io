<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ssh on TheWalrus</title>
    <link>https://blog.thewalr.us/tags/ssh/</link>
    <description>Recent content in Ssh on TheWalrus</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Apr 2019 22:35:10 -0500</lastBuildDate>
    <atom:link href="https://blog.thewalr.us/tags/ssh/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using Nginx Stream Directive to Host SSH and Multiple HTTPS Servers On the Same Port</title>
      <link>https://blog.thewalr.us/2019/04/05/using-nginx-stream-directive-to-host-ssh-and-multiple-https-servers-on-the-same-port/</link>
      <pubDate>Fri, 05 Apr 2019 22:35:10 -0500</pubDate>
      <guid>https://blog.thewalr.us/2019/04/05/using-nginx-stream-directive-to-host-ssh-and-multiple-https-servers-on-the-same-port/</guid>
      <description>&lt;h1 id=&#34;the-problem&#34;&gt;The Problem&lt;/h1&gt;&#xA;&lt;p&gt;If you&amp;rsquo;ve ever tinkered self-hostingi web projects, you&amp;rsquo;re probably already familiar with one of the major webservers like Apache or nginx. You&amp;rsquo;ve likelyalso hosted other non-HTTP(s) services such as SSH, for headless access to a Linux machine or, as I like to do, tunneling your browser traffic through a home Linux server via a SOCKS proxy. This is especially useful when traveling and using open or un-secured WiFi networks, such as at hotels or coffee shops, to prevent your connection from being monitored surreptitiously. Generally tunneling like that works well, and you can run your HTTPS traffic on the standard port 443, and SSH on 22 (or better yet some high-numbered non-standard port). However, you may occasionally run into a situation where outbound ports on that network are blocked, making it difficult or impossible to reach your SSH server. Generally, ports like 80 and 443 are always open for outbound traffic to avoid breaking normal HTTP/HTTPS traffic, and we can utilize this fact to get around the blocked port problem.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
